{"version":3,"sources":["shared/fake_api.js","redux/modules/user.js","shared/Cookie.js","shared/api.js","redux/modules/image.js","redux/modules/post.js","redux/modules/comment.js","redux/configureStore.js","elements/Grid.js","elements/Image.js","elements/Text.js","elements/Input.js","elements/Button.js","components/Header.js","components/Footer.js","shared/Response.js","components/QuickMenu.js","pages/Login.js","pages/Register.js","components/EachComment.js","pages/Comments.js","components/PostLists.js","pages/Main.js","shared/Upload.js","pages/PostWrite.js","shared/App.js","reportWebVitals.js","index.js"],"names":["api","axios","create","baseURL","interceptors","request","use","a","config","headers","response","data","msg","originalRequest","newAccessToken","token","document","cookie","defaults","common","error","Promise","reject","apis","post","get","postId","email","password","nickname","passwordCheck","LOG_OUT","GET_USER","SET_USER","logOut","createAction","user","getUser","setUser","handleActions","state","action","produce","draft","payload","is_login","actionCreators","registerDB","dispatch","getState","history","then","res","console","log","push","window","alert","catch","err","logInDB","name","value","exp","date","Date","setTime","getTime","toUTCString","setCookie","replace","logOutDB","localStorage","removeItem","loginCheckDB","userId","getItem","id","accessToken","split","fileObj","UPLOADING","UPLOAD_IMAGE","SET_PREVIEW","uploading","uploadImage","image_url","setPreview","preview","uploadImageDB","file","imageData","GET_POST","ADD_POST","EDIT_POST","DELETE_POST","LOADING","addPost","post_list","paging","postData","editPost","post_id","is_loading","moment","format","list","reduce","acc","cur","findIndex","unshift","idx","p","filter","is_laoding","next","size","content","image","imgUrl","imageActions","newContent","_image","_post_idx","_post","GET_COMMENT","ADD_COMMENT","EDIT_COMMENT","DELETE_COMMENT","LOADING_COMMENT","getComment","comment","addComment","editComment","commentId","params","deleteComment","loadingComment","is_loading_comment","comments","is_loaded","createBrowserHistory","rootReducer","combineReducers","User","Post","Image","Comment","router","connectRouter","middlewares","thunk","withExtraArgument","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","store","createStore","Grid","props","children","is_flex","is_grid","gridGap","coloumnGap","rowGap","gridTemplateColumns","gridTemplateRows","maxWidth","minWidth","width","height","padding","margin","bg","opacity","border","borderTop","borderRight","borderBottom","borderLeft","position","zIndex","top","right","bottom","left","cursor","_onClick","styles","Fragment","Gridbox","onClick","defaultProps","childrun","styled","div","Gap","shape","src","alt","ImageCircle","SqureOutter","SqureInner","ImageDefault","shpae","Text","color","weight","align","P","Input","multiLine","label","placeholder","type","is_submit","_onSubmit","_onChange","ElTextarea","rows","onChange","ElInput","onKeyPress","e","key","textarea","input","Button","display","is_float","text","boxShadow","fontFamily","borderColor","borderRadius","FloatButton","Button1","button","Logo","HeaderBtn","Nickname","Header","useDispatch","useSelector","style","fontWeight","userActions","Footer","blog_url","github_url","map","member","location","href","commentsId","Response","QuickMenu","className","class","scrollTo","behavior","LInput","Span","span","Btn","Login","useState","setEmail","setPassword","emailMessage","setEmailMessage","passwordMessage","setPasswordMessage","isEmail","setIsEmail","isPassword","setIsPassword","padiing","typeName","emailCurrent","target","test","length","passwordCurrent","passwordText","title","typeTitle","disabled","SignupInput","SignupButton","Register","setNickName","setPasswordCheck","nameMessage","setNameMessage","passwordCheckMessage","setPasswordCheckMessage","isName","setIsName","isPasswordConfirm","setIsPasswordConfirm","passwordConfirmCurrent","EachComment","POSTS","COMMENTS","onclick","is_me","commentActions","Container","Comments","noshade","min-width","max-width","maxlength","justify-content","PostLists","IconButton","user_info","user_name","user_profile","contents","comment_cnt","insert_dt","Main","Label","UploadName","Upload","fileInput","React","useRef","filename","setFilename","selectFile","reader","FileReader","current","files","readAsDataURL","onloadend","result","htmlFor","accept","ref","Wrap","Title","Textarea","TextCnt","ImageInner","PostWrite","match","is_edit","find","setContent","useEffect","goBack","textCnt","maxLength","required","postActions","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.340b0c1d.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n// ******** Axios 인스턴스 생성 ******** //\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8080',\r\n})\r\n\r\n// ******** Interceptor를 통한 Header 설정 ******** //\r\n\r\napi.interceptors.request.use(async (config) => {\r\n  config.headers['Content-type'] = 'application/json; charset=utf-8'\r\n  config.headers['Accept'] = '*/*'\r\n  // await 뒤에 `bearer + ${document.cookie에서 파싱한 token value}`\r\n  // config.headers['Authorization'] = await\r\n  return config\r\n})\r\n\r\n// ******** Interceptor로 Response (token) 설정하기 추가해야 함 ******** //\r\n\r\napi.interceptors.response.use(\r\n  async (response) => {\r\n    if (response.data.msg === '로그인에 성공하셨습니다.') {\r\n      const { config } = response\r\n      const originalRequest = config\r\n\r\n      const newAccessToken = response.data.token\r\n      document.cookie = `token=${newAccessToken};`\r\n\r\n      axios.defaults.headers.common['Authorization'] = `${newAccessToken}`\r\n      originalRequest.headers['Authorization'] = `${newAccessToken}`\r\n\r\n      return axios(originalRequest)\r\n    }\r\n\r\n    return response\r\n  },\r\n  async (error) => {\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// ******** Export api ******** //\r\n\r\nexport const apis = {\r\n  // **** post **** //\r\n  addPost: (post) => api.get('/POSTS', post),\r\n  editPost: (postId, post) => api.get(`/POSTS/${postId}`, post),\r\n  deletePost: (postId) => api.get(`/POSTS/${postId}`),\r\n  // get posts에서 한 postId의 comment 데이터까지 한 번에 가져오도록 수정할 건지 백 확인 필요\r\n  posts: () => api.get('/POSTS'),\r\n\r\n  // **** comment **** //\r\n  addComment: (postId, comment) => api.get(`/POST/${postId}/COMMENTS`, comment),\r\n  editComment: (postId, commentsId, comment) => api.get(`/POSTS/${postId}/COMMENTS/${commentsId}`, comment),\r\n  deleteComment: (postId, commentsId) => api.get(`/POSTS/${postId}/COMMENTS/${commentsId}`),\r\n  comments: (postId) => api.get(`/POSTS/${postId}/COMMENTS`),\r\n\r\n  // **** user **** //\r\n  login: (email, password) => api.get('/LOGIN', { email: email, password: password }),\r\n  register: (email, nickname, password, passwordCheck) => api.get('/REGISTER', { email: email, nickname: nickname, password: password, passwordCheck: passwordCheck }),\r\n}\r\n","import { createAction, handleActions } from 'redux-actions'\r\nimport { produce } from 'immer'\r\n\r\nimport { setCookie, getCookie, deleteCookie } from '../../shared/Cookie'\r\nimport { applyMiddleware } from 'redux'\r\n\r\nimport { apis } from '../../shared/fake_api'\r\n\r\nconst LOG_IN = 'LOG_IN'\r\nconst LOG_OUT = 'LOG_OUT'\r\nconst GET_USER = 'GET_USER'\r\nconst SET_USER = 'SET_USER'\r\n\r\n// const logIn = createAction(LOG_IN, (user) => ({ user }))\r\nconst logOut = createAction(LOG_OUT, (user) => ({ user }))\r\nconst getUser = createAction(GET_USER, (user) => ({ user }))\r\nconst setUser = createAction(SET_USER, (user) => ({ user }))\r\n\r\nconst initialState = {\r\n  user: null,\r\n  is_login: false,\r\n}\r\n\r\nconst user_initial = {\r\n  email: 'test@tt.tt',\r\n  nickname: 'test',\r\n  password: 'tttt12345*',\r\n  passwordcheck: 'tttt12345*',\r\n}\r\n\r\n//middleware\r\n\r\nconst registerDB = (email, nickname, password, passwordCheck) => {\r\n  return function (dispatch, getState, { history }) {\r\n    apis\r\n      .register(email, nickname, password, passwordCheck) //유저가 입력한 유저정보를 api로 넘겨줘야함\r\n      .then((res) => {\r\n        //완료되면 res가 넘어오고\r\n        console.log(res)\r\n        history.push('/login')\r\n        window.alert('회원가입을 축하드립니다! 로그인 후 이용하실 수 있어요(о´∀`о)')\r\n      })\r\n      .catch((err) => {\r\n        //오류나면 이리로\r\n        console.log(err)\r\n      })\r\n  }\r\n}\r\n\r\nconst logInDB = (email, password) => {\r\n  return function (dispatch, getState, { history }) {\r\n    apis\r\n      .login(email, password)\r\n      .then((res) => {\r\n        console.log(res)\r\n        setCookie('token', res.data[0].token, 3)\r\n        // localStorage.setItem()\r\n        dispatch(setUser({ email: email }))\r\n        history.replace('/posts')\r\n      })\r\n      .catch((err) => {\r\n        console.log(err)\r\n        // window.alert('회원정보가 없습니다.')\r\n      })\r\n  }\r\n}\r\n\r\nconst logOutDB = () => {\r\n  return function (dispatch, getState, { history }) {\r\n    deleteCookie('token')\r\n    localStorage.removeItem()\r\n    dispatch(logOut('/login'))\r\n  }\r\n}\r\n\r\nconst loginCheckDB = () => {\r\n  return function (dispatch, getState, { history }) {\r\n    const userId = localStorage.getItem('username')\r\n    const tokenCheck = document.cookie\r\n    if (tokenCheck) {\r\n      dispatch(SET_USER({ id: userId }))\r\n    } else {\r\n      dispatch(logOut())\r\n    }\r\n  }\r\n}\r\n\r\n//reducer\r\nexport default handleActions(\r\n  {\r\n    [SET_USER]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        // setCookie('is_login', 'success')\r\n        draft.user = action.payload.user\r\n        draft.is_login = true\r\n      }),\r\n    [LOG_OUT]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        // deleteCookie('is_login')\r\n        draft.user = null\r\n        draft.is_login = false\r\n      }),\r\n    [GET_USER]: (state, action) => produce(state, (draft) => {}),\r\n  },\r\n  initialState\r\n)\r\n\r\nconst actionCreators = {\r\n  setUser,\r\n  logOut,\r\n  getUser,\r\n  registerDB,\r\n  logInDB,\r\n  logOutDB,\r\n  loginCheckDB,\r\n}\r\n\r\nexport { actionCreators }\r\n","// // 키값 기준으로 쿠키에 저장된 값을 가져오는 함수\r\n// const getCookie = (name) => {\r\n//   // 쿠키 값을 가져옵니다.\r\n//   let value = '; ' + document.cookie\r\n//   // 키 값을 기준으로 파싱합니다.\r\n//   let parts = value.split('; ' + name + '=')\r\n//   // value를 return!\r\n//   if (parts.length === 2) {\r\n//     return parts.pop().split(';').shift()\r\n//   }\r\n// }\r\n\r\n// 쿠키에 저장하는 함수\r\nconst setCookie = (name, value, exp = 5) => {\r\n  let date = new Date()\r\n  // 날짜를 만들어줍니다.\r\n  date.setTime(date.getTime() + exp * 24 * 60 * 60 * 1000)\r\n  // 저장!\r\n  document.cookie = `${name}=${value};expires=${date.toUTCString()};path=/`\r\n}\r\n\r\n// 만료일을 예전으로 설정해 쿠키를 지웁니다.\r\nconst deleteCookie = (name) => {\r\n  document.cookie = name + '=; expires=Thu, 01 Jan 1999 00:00:10 GMT;'\r\n}\r\n\r\nexport { setCookie, deleteCookie }\r\n","import axios from 'axios'\r\n\r\n// ******** Axios 인스턴스 생성 ******** //\r\n\r\nconst api = axios.create({\r\n  baseURL: 'https://api.example.com',\r\n})\r\n\r\n// ******** Interceptor를 통한 Header 설정 ******** //\r\n\r\napi.interceptors.request.use(async (config) => {\r\n  const accessToken = document.cookie.split('=')[1]\r\n  config.headers['Content-type'] = 'application/json; charset=utf-8'\r\n  config.headers['Accept'] = '*/*'\r\n  config.headers['Authorization'] = `bearer ${accessToken}`\r\n  return config\r\n})\r\n\r\n// ******** Export api ******** //\r\n\r\nexport const apis = {\r\n  // **** post **** //\r\n  addPost: (post) => api.post('/api/posts/', post),\r\n  editPost: (postId, newPost) => api.put(`/api/posts/${postId}/`, newPost),\r\n  deletePost: (postId) => api.delete(`/api/posts/${postId}`),\r\n  // get posts에서 한 postId의 comment 데이터까지 한 번에 가져오도록 수정할 건지 백 확인 필요\r\n  posts: () => api.get('/api/posts'),\r\n\r\n  // **** image upload **** //\r\n  uploadImage: (fileObj) => api.post('/api/posts/upload', fileObj),\r\n\r\n  // **** comment **** //\r\n  addComment: (postId, comment) => api.post(`/api/posts/${postId}/comments`, comment),\r\n  editComment: (postId, commentId, newComment) => api.put(`/api/posts/${postId}/comments/${commentId}`, newComment),\r\n  deleteComment: (postId, commentId) => api.delete(`/api/posts/${postId}/comments/${commentId}`),\r\n  comments: (postId) => api.get(`/api/posts/${postId}/comments`),\r\n\r\n  // **** user **** //\r\n  login: (email, password) => api.post('/api/auth/login', { email: email, password: password }),\r\n  register: (email, nickname, password, passwordCheck) => api.post('/api/auth/register', { email: email, nickname: nickname, password: password, passwordCheck: passwordCheck }),\r\n  users: () => api.get('/api/auth'),\r\n}\r\n","import { createAction, handleActions } from 'redux-actions'\r\nimport produce from 'immer'\r\nimport { apis } from '../../shared/api'\r\n\r\n// **************** Action Type **************** //\r\n\r\nconst UPLOADING = 'UPLOADING'\r\nconst UPLOAD_IMAGE = 'UPLOAD_IMAGE'\r\nconst SET_PREVIEW = 'SET_PREVIEW'\r\n\r\n// **************** Action Creators **************** //\r\n\r\nconst uploading = createAction(UPLOADING, (uploading) => ({ uploading }))\r\nconst uploadImage = createAction(UPLOAD_IMAGE, (image_url) => ({ image_url }))\r\nconst setPreview = createAction(SET_PREVIEW, (preview) => ({ preview }))\r\n\r\n// **************** Initial Data **************** //\r\n\r\nconst initialState = {\r\n  image_url: '',\r\n  uploading: false,\r\n  preview: null,\r\n}\r\n\r\n// **************** Middlewares **************** //\r\n\r\nconst uploadImageDB = (file) => {\r\n  return async function (dispatch, getState, { history }) {\r\n    const fileObj = {\r\n      fileObj: file,\r\n    }\r\n\r\n    try {\r\n      const imageData = await apis.uploadImage(fileObj)\r\n      dispatch(uploadImage(imageData.image_url))\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n}\r\n\r\n// **************** Reducer **************** //\r\n\r\nexport default handleActions(\r\n  {\r\n    [UPLOAD_IMAGE]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        draft.image_url = action.payload.image_url\r\n      }),\r\n    [UPLOADING]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        draft.uploading = action.payload.uploading\r\n      }),\r\n    [SET_PREVIEW]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        draft.preview = action.payload.preview\r\n      }),\r\n  },\r\n  initialState\r\n)\r\n\r\n// **************** Export **************** //\r\n\r\nconst actionCreators = {\r\n  uploading,\r\n  uploadImage,\r\n  uploadImageDB,\r\n  setPreview,\r\n}\r\n\r\nexport { actionCreators }\r\n","import { createAction, handleActions } from 'redux-actions'\r\nimport { produce } from 'immer'\r\nimport 'moment'\r\nimport 'moment/locale/ko'\r\nimport moment from 'moment'\r\n\r\n// ************ modules ************ //\r\nimport { actionCreators as imageActions } from './image'\r\nimport { apis } from '../../shared/fake_api'\r\n\r\n// // ************ Action Type ************ //\r\n\r\nconst GET_POST = 'GET_POST'\r\nconst ADD_POST = 'ADD_POST'\r\nconst EDIT_POST = 'EDIT_POST'\r\nconst DELETE_POST = 'DELETE_POST'\r\nconst LOADING = 'LOADING'\r\n\r\n// // ************ Action Creator ************ //\r\n\r\nconst getPost = createAction(GET_POST, (post_list, paging) => ({ post_list, paging }))\r\nconst addPost = createAction(ADD_POST, (postData) => ({ postData }))\r\nconst editPost = createAction(EDIT_POST, (postId, post) => ({ postId, post }))\r\nconst deletePost = createAction(DELETE_POST, (post_id) => ({ post_id }))\r\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }))\r\n\r\n// ************ Initial Data ************ //\r\n\r\nconst initialState = {\r\n  list: [],\r\n  paging: { state: null, next: null, size: 3 },\r\n  is_laoding: false,\r\n}\r\n\r\nconst initialPost = {\r\n  userId: 1,\r\n  postId: 1,\r\n  nickname: 'zubetcha',\r\n  createAt: moment().format('YYYY-MM-DD HH:mm:ss'),\r\n  content: '',\r\n  imgUrl: 'https://pbs.twimg.com/profile_images/1381421858151563264/-bjvX4Ui_400x400.jpg',\r\n  numOfComments: 10,\r\n}\r\n\r\n// ************ Middlewares ************ //\r\n\r\nconst getPostDB = (start = null, size = 3) => {\r\n  return async function (dispatch, getState, { history }) {\r\n    let _paging = getState().post.paging\r\n\r\n    if (_paging.start && !_paging.next) {\r\n      return\r\n    }\r\n\r\n    dispatch(loading(true))\r\n\r\n    // 무한스크롤 구현 필요\r\n\r\n    try {\r\n      const post_list = await apis.posts()\r\n      dispatch(getPost(post_list, _paging))\r\n      dispatch(imageActions.setPreview(null))\r\n    } catch (error) {\r\n      console.log('게시글 조회에 문제가 발생했습니다.', error)\r\n    }\r\n  }\r\n}\r\n\r\nconst addPostDB = (content) => {\r\n  return async function (dispatch, getState, { history }) {\r\n    // const _user = getState().user.user\r\n    const image_url = getState().image.image_url\r\n\r\n    // const user_info = {\r\n    //   userId: _user.userId,\r\n    //   nickname: _user.nickname,\r\n    //   // 프로필 사진 설정할지 ??\r\n    //   userProfile: _user.userProfile,\r\n    // }\r\n\r\n    try {\r\n      const postData = await apis.addPost({ content: content, imgUrl: image_url })\r\n      dispatch(addPost(postData.post))\r\n      history.replace('/posts')\r\n      dispatch(imageActions.setPreview(null))\r\n    } catch (error) {\r\n      console.log('게시글 작성에 문제가 발생했습니다.', error)\r\n      // window.alert('게시글 작성에 문제가 발생했습니다')\r\n    }\r\n  }\r\n}\r\n\r\nconst editPostDB = (postId, newContent) => {\r\n  return async function (dispatch, getState, { history }) {\r\n    if (!postId) {\r\n      console.log('게시물 정보가 없습니다.')\r\n      return\r\n    }\r\n\r\n    const image_url = getState().image.image_url\r\n\r\n    const _image = getState().image.preview\r\n    const _post_idx = getState().post.list.findIndex((post) => post.postId === postId)\r\n    const _post = getState().post.list[_post_idx]\r\n\r\n    try {\r\n      if (_image === _post.imgUrl) {\r\n        await apis.editPost(postId, { content: newContent, imgUrl: _post.imgUrl })\r\n        dispatch(editPost(postId, { content: newContent }))\r\n        history.replace('/posts')\r\n      } else {\r\n        await apis.editPost(postId, { content: newContent, imgUrl: image_url })\r\n        dispatch(editPost(postId, { content: newContent, imgUrl: image_url }))\r\n        history.replace('/posts')\r\n      }\r\n    } catch (error) {\r\n      console.log('게시글 수정에 문제가 발생했습니다.', error)\r\n      // window.alert('게시글 작성에 문제가 발생했습니다')\r\n    }\r\n  }\r\n}\r\n\r\nconst deletePostDB = (postId) => {\r\n  return async function (dispatch, getState, { history }) {\r\n    if (!postId) {\r\n      console.log('게시물 정보가 없습니다.')\r\n      return\r\n    }\r\n    try {\r\n      await apis.deletePost(postId)\r\n      dispatch(deletePost(postId))\r\n    } catch (error) {\r\n      console.log('게시글 삭제에 문제가 발생했습니다.')\r\n      // window.alert('게시글 삭제에 문제가 발생했습니다')\r\n    }\r\n  }\r\n}\r\n\r\n// ************ Reducer ************ //\r\n\r\nexport default handleActions(\r\n  {\r\n    [GET_POST]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        draft.list.push(...action.payload.post_list)\r\n\r\n        draft.list = draft.list.reduce((acc, cur) => {\r\n          if (acc.findIndex((a) => a.id === cur.id) === -1) {\r\n            return [...acc, cur]\r\n          } else {\r\n            acc[acc.findIndex((a) => a.id === cur.id)] = cur\r\n            return acc\r\n          }\r\n        }, [])\r\n\r\n        if (action.payload.paging) {\r\n          draft.paging = action.payload.paging\r\n        }\r\n        draft.is_loading = false\r\n      }),\r\n    [ADD_POST]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        draft.list.unshift(action.payload.postData)\r\n      }),\r\n    [EDIT_POST]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        let idx = draft.list.findIndex((p) => p.id === action.payload.post_id)\r\n        draft.list[idx] = { ...draft.list[idx], ...action.payload.post }\r\n      }),\r\n    [DELETE_POST]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        draft.list.filter((p) => p.id !== action.payload.post_id)\r\n      }),\r\n    [LOADING]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        draft.is_laoding = action.payload.is_loading\r\n      }),\r\n  },\r\n  initialState\r\n)\r\n\r\n// ************ Export ************ //\r\n\r\nconst actionCreators = {\r\n  getPost,\r\n  getPostDB,\r\n  addPost,\r\n  addPostDB,\r\n  editPost,\r\n  editPostDB,\r\n  deletePost,\r\n  deletePostDB,\r\n  loading,\r\n}\r\n\r\nexport { actionCreators }\r\n","import { createAction, handleActions } from 'redux-actions'\r\nimport { apis } from '../../shared/fake_api'\r\nimport axios from 'axios'\r\nimport { produce } from 'immer'\r\n\r\n// Actions Types\r\nconst GET_COMMENT = 'GET_COMMENT'\r\nconst ADD_COMMENT = 'ADD_COMMENT'\r\nconst EDIT_COMMENT = 'EDIT_COMMENT'\r\nconst DELETE_COMMENT = 'DELETE_COMMENT'\r\nconst LOADING_COMMENT = 'LOADING_COMMENT'\r\n\r\n// Action Creators\r\nconst getComment = createAction(GET_COMMENT, (comment) => ({ comment }))\r\nconst addComment = createAction(ADD_COMMENT, (comment, postId) => ({ comment, postId }))\r\nconst editComment = createAction(EDIT_COMMENT, (commentId, params) => ({ commentId, params }))\r\nconst deleteComment = createAction(DELETE_COMMENT, (commentId, params) => ({ commentId, params }))\r\nconst loadingComment = createAction(LOADING_COMMENT, (is_loading_comment) => ({ is_loading_comment }))\r\n\r\nconst initialState = {\r\n  commentId: null,\r\n  userId: null,\r\n  postId: null,\r\n  comment: '',\r\n  is_loaded: false,\r\n}\r\n\r\n// Thunk function\r\nexport const _getComment =\r\n  (postId) =>\r\n  async (dispatch, getState, { history }) => {\r\n    try {\r\n      const { data } = await apis.comments(postId)\r\n      dispatch(getComment(data))\r\n    } catch (e) {\r\n      // console.log(`코멘트 불러오기 실패! ${e}`);\r\n    }\r\n  }\r\n\r\nexport const _addComment =\r\n  (postId, content) =>\r\n  async (dispatch, getState, { history }) => {\r\n    try {\r\n      const { data } = await apis.addComment(postId, content)\r\n      dispatch(addComment(data))\r\n    } catch (e) {}\r\n  }\r\n\r\nexport const _editComment = (postId, commentId, newContent, setEditMode) => async (dispatch) => {\r\n  const { data } = await apis.editComment(postId, commentId, newContent)\r\n  dispatch(editComment(commentId, data))\r\n  setEditMode(false)\r\n}\r\n\r\nexport const _deleteComment = (postId, commentId) => (dispatch) => {\r\n  try {\r\n    apis.deleteComment(postId, commentId)\r\n    dispatch(deleteComment(commentId))\r\n  } catch (e) {}\r\n}\r\n\r\n// Reducer\r\nexport default handleActions(\r\n  {\r\n    [GET_COMMENT]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        draft.list[action.payload.postId] = action.payload.comments\r\n      }),\r\n    [ADD_COMMENT]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        draft.list[action.payload.postId].unshift(action.payload.comment)\r\n      }),\r\n    [EDIT_COMMENT]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        draft.list[action.payload.commentId] = action.payload.comments\r\n      }),\r\n    [DELETE_COMMENT]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        draft.list[action.payload.commentId] = action.payload.comments\r\n      }),\r\n    [LOADING_COMMENT]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        draft.is_loading = action.payload.is_loading\r\n      }),\r\n  },\r\n  initialState\r\n)\r\n\r\nconst actionCreators = {\r\n  getComment,\r\n  addComment,\r\n  editComment,\r\n  deleteComment,\r\n  loadingComment,\r\n}\r\n\r\nexport { actionCreators }\r\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { createBrowserHistory } from 'history'\r\nimport { connectRouter } from 'connected-react-router'\r\n\r\nimport User from './modules/user'\r\nimport Post from './modules/post'\r\nimport Image from './modules/image'\r\nimport Comment from './modules/comment'\r\n\r\nexport const history = createBrowserHistory()\r\n\r\nconst rootReducer = combineReducers({\r\n  user: User,\r\n  post: Post,\r\n  image: Image,\r\n  comment: Comment,\r\n  router: connectRouter(history),\r\n})\r\n\r\nconst middlewares = [thunk.withExtraArgument({ history: history })]\r\n\r\n// 지금이 어느 환경인 지 알려줘요. (개발환경, 프로덕션(배포)환경 ...)\r\nconst env = process.env.NODE_ENV\r\n\r\n// 개발환경에서는 로거라는 걸 하나만 더 써볼게요.\r\nif (env === 'development') {\r\n  const { logger } = require('redux-logger')\r\n  middlewares.push(logger)\r\n}\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n        // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n      })\r\n    : compose\r\n\r\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares))\r\n\r\nlet store = (initialStore) => createStore(rootReducer, enhancer)\r\n\r\nexport default store()\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Grid = (props) => {\r\n  const {\r\n    children,\r\n    is_flex,\r\n    is_grid,\r\n    gridGap,\r\n    coloumnGap,\r\n    rowGap,\r\n    gridTemplateColumns,\r\n    gridTemplateRows,\r\n\r\n    maxWidth,\r\n    minWidth,\r\n    width,\r\n    height,\r\n\r\n    padding,\r\n    margin,\r\n\r\n    bg,\r\n    opacity,\r\n\r\n    border,\r\n    borderTop,\r\n    borderRight,\r\n    borderBottom,\r\n    borderLeft,\r\n\r\n    position,\r\n    zIndex,\r\n\r\n    top,\r\n    right,\r\n    bottom,\r\n    left,\r\n\r\n    cursor,\r\n    _onClick,\r\n  } = props\r\n\r\n  const styles = {\r\n    is_flex: is_flex,\r\n    is_grid: is_grid,\r\n    gridGap: gridGap,\r\n    coloumnGap: coloumnGap,\r\n    rowGap: rowGap,\r\n    gridTemplateColumns: gridTemplateColumns,\r\n    gridTemplateRows: gridTemplateRows,\r\n\r\n    maxWidth: maxWidth,\r\n    minWidth: minWidth,\r\n    width: width,\r\n    height: height,\r\n\r\n    padding: padding,\r\n    margin: margin,\r\n\r\n    bg: bg,\r\n    opacity: opacity,\r\n\r\n    border: border,\r\n    borderTop: borderTop,\r\n    borderRight: borderRight,\r\n    borderBottom: borderBottom,\r\n    borderLeft: borderLeft,\r\n\r\n    position: position,\r\n    zIndex: zIndex,\r\n\r\n    top: top,\r\n    right: right,\r\n    bottom: bottom,\r\n    left: left,\r\n\r\n    cursor: cursor,\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Gridbox onClick={_onClick} {...styles}>\r\n        {children}\r\n      </Gridbox>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nGrid.defaultProps = {\r\n  childrun: null,\r\n\r\n  is_flex: false,\r\n  is_grid: false,\r\n  gridGap: 'false',\r\n  coloumnGap: 'false',\r\n  rowGap: 'false',\r\n  gridTemplateColumns: 'false',\r\n  gridTemplateRows: 'false',\r\n\r\n  maxWidth: 'false',\r\n  minWidth: 'false',\r\n  width: '100%',\r\n  height: '',\r\n\r\n  padding: false,\r\n  margin: false,\r\n\r\n  bg: 'false',\r\n  opacity: 1,\r\n\r\n  border: 'false',\r\n  borderTop: 'false',\r\n  borderRight: 'false',\r\n  borderBottom: 'false',\r\n  borderLeft: 'false',\r\n\r\n  position: 'false',\r\n  zIndex: 0,\r\n\r\n  top: 'false',\r\n  right: 'false',\r\n  bottom: 'false',\r\n  left: 'false',\r\n\r\n  cursor: 'default',\r\n  _onClick: () => {},\r\n}\r\n\r\nconst Gridbox = styled.div`\r\n  ${(props) => (props.is_flex ? `display: flex; align-items: center; justify-content: space-between;` : '')}\r\n  ${(props) => (props.is_grid ? `display: grid; align-items: center; justify-content: space-between;` : '')}\r\n\t${(props) => (props.gridGap ? `gap: ${props.gridGap}` : '')}\r\n\t${(props) => (props.coloumnGap ? `column-gap: ${props.coloumnGap}` : '')}\r\n\t${(props) => (props.rowGap ? `row-gap: ${props.Gap}` : '')}\r\n\t${(props) => (props.gridTemplateColumns ? `grid-template-columns: ${props.gridTemplateColumns}` : '')}\r\n\t${(props) => (props.gridTemplateRows ? `grid-template-rows: ${props.gridTemplateRows}` : '')}\r\n\r\n  ${(props) => (props.minWidth ? `min-width: ${props.minWidth};` : '')}\r\n  ${(props) => (props.maxWidth ? `max-width: ${props.maxWidth};` : '')}\r\n\twidth: ${(props) => props.width};\r\n  height: ${(props) => props.height};\r\n\r\n  ${(props) => (props.padding ? `padding: ${props.padding};` : '')}\r\n  ${(props) => (props.margin ? `margin: ${props.margin};` : '')}\r\n\r\n\t${(props) => (props.bg ? `background-color: ${props.bg};` : '')}\r\n\topacity: ${(props) => props.opacity};\r\n\r\n  ${(props) => (props.border ? `border: ${props.border};` : '')}\r\n  ${(props) => (props.borderTop ? `border-top: ${props.borderTop};` : '')}\r\n\t${(props) => (props.borderRight ? `border-right: ${props.borderRight};` : '')}\r\n\t${(props) => (props.borderBottom ? `border-bottom: ${props.borderBottom};` : '')}\r\n\t${(props) => (props.borderLeft ? `border-left: ${props.borderLeft};` : '')}\r\n\r\n\t${(props) => (props.position ? `position: ${props.position};` : '')}\r\n\t${(props) => (props.zIndex ? `z-index: ${props.zIndex};` : '')}\r\n\r\n\t${(props) => (props.top ? `top: ${props.top};` : '')}\r\n\t${(props) => (props.right ? `right: ${props.right};` : '')}\r\n\t${(props) => (props.bottom ? `bottom: ${props.bottom};` : '')}\r\n\t${(props) => (props.left ? `left: ${props.left};` : '')}\r\n\r\n\tcursor: ${(props) => props.cursor};\r\n`\r\n\r\nexport default Grid\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Image = (props) => {\r\n  const { shape, src, size, alt, width, height } = props\r\n  const styles = {\r\n    src: src,\r\n    size: size,\r\n  }\r\n\r\n  if (shape === 'circle') {\r\n    return <ImageCircle {...styles}></ImageCircle>\r\n  }\r\n  if (shape === 'rectangle') {\r\n    return (\r\n      <SqureOutter>\r\n        <SqureInner {...styles}></SqureInner>\r\n      </SqureOutter>\r\n    )\r\n  }\r\n  return (\r\n    <>\r\n      <ImageDefault {...styles}></ImageDefault>\r\n    </>\r\n  )\r\n}\r\n\r\nImage.defaultProps = {\r\n  shpae: 'circle',\r\n  src: 'https://cdn-icons-png.flaticon.com/512/1864/1864514.png',\r\n  size: 45,\r\n  alt: 'My Image',\r\n  width: 'false',\r\n  height: 'false',\r\n}\r\n\r\nconst ImageDefault = styled.div`\r\n  --size: ${(props) => props.size}px;\r\n  width: var(--size);\r\n  height: var(--size);\r\n  background-image: url('${(props) => props.src}');\r\n  background-size: cover;\r\n  background-position: center;\r\n`\r\n\r\nconst ImageCircle = styled.div`\r\n  --size: ${(props) => props.size}px;\r\n  width: var(--size);\r\n  height: var(--size);\r\n  border-radius: var(--size);\r\n  background-image: url('${(props) => props.src}');\r\n  background-size: cover;\r\n  background-position: center;\r\n  margin: 5px;\r\n`\r\n\r\nconst SqureOutter = styled.div`\r\n  width: 100%;\r\n`\r\nconst SqureInner = styled.div`\r\n  position: relative;\r\n  overflow: hidden;\r\n  background-image: url('${(props) => props.src}');\r\n  background-size: cover;\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\n\r\nexport default Image\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Text = (props) => {\r\n  const { children, color, margin, size, weight, align } = props\r\n\r\n  const styles = {\r\n    color: color,\r\n    margin: margin,\r\n    size: size,\r\n    weight: weight,\r\n    align: align,\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <P {...styles}>{children}</P>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nText.defaultProps = {\r\n  children: null,\r\n  color: '#222831',\r\n  margin: false,\r\n  size: false,\r\n  weight: false,\r\n  align: 'false',\r\n}\r\n\r\nconst P = styled.p`\r\n  color: ${(props) => props.color};\r\n  ${(props) => (props.size ? `font-size: ${props.size};` : '')}\r\n  ${(props) => (props.margin ? `margin: ${props.margin};` : '')}\r\n  ${(props) => (props.weight ? `font-weight: ${props.weight};` : '')}\r\n  ${(props) => (props.align ? `text-align: ${props.align};` : '')}\r\n`\r\n\r\nexport default Text\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Input = (props) => {\r\n  const { multiLine, label, placeholder, type, value, is_submit, _onSubmit, _onChange } = props\r\n\r\n  if (multiLine) {\r\n    return (\r\n      <div>\r\n        {label && <text margin=\"0px\">{label}</text>}\r\n        <ElTextarea value={value} rows={10} placeholder={placeholder} onChange={_onChange}></ElTextarea>\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <>\r\n      <div>\r\n        {label && <text margin=\"0px\">{label}</text>}\r\n        {is_submit ? (\r\n          <ElInput\r\n            type={type}\r\n            placeholder={placeholder}\r\n            onChange={_onChange}\r\n            value={value}\r\n            onKeyPress={(e) => {\r\n              if (e.key === 'Enter') {\r\n                _onSubmit(e)\r\n              }\r\n            }}\r\n          />\r\n        ) : (\r\n          <ElInput type={type} placeholder={placeholder} onChange={_onChange} />\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nInput.defaultProps = {\r\n  multiLine: false,\r\n  label: false,\r\n  placeholder: '텍스트를 입력해주세요.',\r\n  type: 'text',\r\n  value: '',\r\n  is_submit: false,\r\n  _onSubmit: () => {},\r\n  _onChange: () => {},\r\n  type: false,\r\n}\r\n\r\nconst ElTextarea = styled.textarea`\r\n  border: 1px solid #a4a4a4;\r\n  width: 100%;\r\n  padding: 12px 4px;\r\n  box-sizing: border-box;\r\n`\r\n\r\nconst ElInput = styled.input`\r\n  border: 1px solid #a4a4a4;\r\n  width: 100%;\r\n  padding: 12px 4px;\r\n  box-sizing: border-box;\r\n`\r\nexport default Input\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Button = (props) => {\r\n  const { display, align, is_float, text, _onClick, margin, width, height, padding, children, bg, boxShadow, fontFamily, cursor, borderColor, borderRadius, border } = props\r\n\r\n  if (is_float) {\r\n    return (\r\n      <React.Fragment>\r\n        <FloatButton onClick={_onClick}>{text ? text : children}</FloatButton>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  const styles = {\r\n    margin: margin,\r\n    padding: padding,\r\n    width: width,\r\n    height: height,\r\n    bg: bg,\r\n    display: display,\r\n    boxShadow: boxShadow,\r\n    fontFamily: fontFamily,\r\n    cursor: cursor,\r\n    borderColor: borderColor,\r\n    borderRadius: borderRadius,\r\n    border: border,\r\n    align: align,\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button1 {...styles} onClick={_onClick}>\r\n        {text ? text : children}\r\n      </Button1>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nButton.defaultProps = {\r\n  children: null,\r\n  is_float: false,\r\n  text: false,\r\n  _onClick: () => {},\r\n  margin: 'false',\r\n  width: 'false',\r\n  height: 'false',\r\n  padding: 'false',\r\n  bg: 'false',\r\n  boxShadow: 'false',\r\n  cursor: 'pointer',\r\n  display: 'false',\r\n  fontFamily: 'false',\r\n  borderColor: 'false',\r\n  borderRadius: 'false',\r\n  border: 'false',\r\n  align: 'false',\r\n}\r\n\r\nconst Button1 = styled.button`\r\n  margin: ${(props) => props.margin};\r\n  width: ${(props) => props.width};\r\n  height: ${(props) => props.height};\r\n  padding: ${(props) => props.padding};\r\n  ${(props) => (props.bg ? `background-color: ${props.bg};` : '')}\r\n  ${(props) => (props.boxShadow ? `box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);` : '')}\r\n    ${(props) => (props.cursor ? `cursor: ${props.cursor};` : '')}\r\n    ${(props) => (props.fontFamily ? `font-family: ${props.fontFamily}` : '')}\r\n    ${(props) => (props.borderColor ? `border-color: ${props.borderColor};` : '')}\r\n    ${(props) => (props.borderRadius ? `border-radius: ${props.borderRadius};` : '')}\r\n    ${(props) => (props.border ? `border: ${props.border};` : '')}\r\n    ${(props) => (props.display ? `display: ${props.display};` : '')} \r\n    ${(props) => (props.align ? `align-items: ${props.align};` : '')}\r\n`\r\n\r\nconst FloatButton = styled.button`\r\n  width: 'auto';\r\n  height: 'auto';\r\n  background-color: #212121;\r\n  color: #ffffff;\r\n  box-sizing: border-box;\r\n  font-size: 'auto';\r\n  font-weight: 'auto';\r\n  position: fixed;\r\n  bottom: 'auto';\r\n  right: 'auto';\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  border: 'none';\r\n  border-radius: 'auto';\r\n  cursor: 'pointer';\r\n`\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { actionCreators as userActions } from '../redux/modules/user'\r\nimport { history } from '../redux/configureStore'\r\n\r\nimport { getCookie, deleteCookie } from '../shared/Cookie'\r\nimport { Grid, Button, Text } from '../elements'\r\nimport '../index.css'\r\n\r\nconst Header = (props) => {\r\n  const dispatch = useDispatch()\r\n  const is_login = useSelector((state) => state.user.is_login)\r\n\r\n  // **** Login **** //\r\n  if (is_login) {\r\n    return (\r\n      <Grid is_flex width=\"100%\" height=\"60px\" borderBottom=\"0.5px solid #b7b7b7\" bg=\"#FFF\" position=\"sticky\" top=\"0\" zIndex=\"1\">\r\n        <Grid is_flex maxWidth=\"1000px\" minWidth=\"650px\" height=\"60px\" margin=\"0 auto\" bg=\"#FFF\" zIndex=\"2\">\r\n          <Grid width=\"auto\" margin=\"0 20px\">\r\n            <Logo\r\n              onClick={() => {\r\n                history.push('/posts')\r\n              }}\r\n            >\r\n              HHL\r\n            </Logo>\r\n          </Grid>\r\n          <Grid is_flex width=\"auto\">\r\n            <Nickname>\r\n              <span style={{ fontWeight: '700' }}>nickname</span> 님, 반가워요!\r\n            </Nickname>\r\n            <HeaderBtn\r\n              style={{ margin: '0 20px 0 10px' }}\r\n              onClick={() => {\r\n                dispatch(userActions.logOut({}))\r\n              }}\r\n            >\r\n              LOGOUT\r\n            </HeaderBtn>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  // **** Logout **** //\r\n  return (\r\n    <React.Fragment>\r\n      <Grid is_flex width=\"100%\" height=\"60px\" borderBottom=\"0.5px solid #b7b7b7\" bg=\"#FFF\" position=\"sticky\" top=\"0\" zIndex=\"1\">\r\n        <Grid is_flex maxWidth=\"1000px\" minWidth=\"650px\" height=\"60px\" margin=\"0 auto\" bg=\"#FFF\" zIndex=\"2\">\r\n          <Grid width=\"auto\" margin=\"0 20px\">\r\n            <Logo\r\n              onClick={() => {\r\n                history.push('/posts')\r\n              }}\r\n            >\r\n              HHL\r\n            </Logo>\r\n          </Grid>\r\n          <Grid is_flex width=\"auto\">\r\n            <HeaderBtn\r\n              style={{ margin: '0 10px' }}\r\n              onClick={() => {\r\n                history.push('/login')\r\n              }}\r\n            >\r\n              LOGIN\r\n            </HeaderBtn>\r\n            <HeaderBtn\r\n              style={{ margin: '0 20px 0 10px' }}\r\n              onClick={() => {\r\n                history.push('/register')\r\n              }}\r\n            >\r\n              JOIN\r\n            </HeaderBtn>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst Logo = styled.p`\r\n  font-family: 'Expletus Sans', cursive;\r\n  font-size: 2rem;\r\n  font-weight: 900;\r\n  cursor: pointer;\r\n`\r\n\r\nconst HeaderBtn = styled.button`\r\n  width: 120px;\r\n  height: 40px;\r\n  box-sizing: border-box;\r\n  border: none;\r\n  border-radius: 20px;\r\n  outline: none;\r\n  background-color: #333;\r\n  color: #fdfdfd;\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  cursor: pointer;\r\n\r\n  will-change: transform;\r\n  transition: transform 450ms;\r\n  &:hover {\r\n    background-color: #a496c7;\r\n    transition: transform 500ms;\r\n    transform: translateY(-3px);\r\n  }\r\n`\r\n\r\nconst Nickname = styled.p`\r\n  margin: 0 10px;\r\n  width: 300px;\r\n  border: none;\r\n  border-radius: 20px;\r\n  outline: none;\r\n  background-color: #fff;\r\n  font-size: 14px;\r\n  text-align: right;\r\n  vertical-align: middle;\r\n`\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nimport { Grid, Image, Text } from '../elements'\r\n\r\nimport FaceIcon from '@mui/icons-material/Face'\r\nimport GitHubIcon from '@mui/icons-material/GitHub'\r\n\r\nconst Footer = (props) => {\r\n  const members = [\r\n    { src: 'https://t1.daumcdn.net/cfile/blog/99EFF04B5E01683F30', nickname: 'zubetcha', blog_url: '', github_url: '' },\r\n    { src: 'https://t1.daumcdn.net/cfile/blog/99EFF04B5E01683F30', nickname: 'zubetcha', blog_url: '', github_url: '' },\r\n    { src: 'https://t1.daumcdn.net/cfile/blog/99EFF04B5E01683F30', nickname: 'zubetcha', blog_url: '', github_url: '' },\r\n    { src: 'https://t1.daumcdn.net/cfile/blog/99EFF04B5E01683F30', nickname: 'zubetcha', blog_url: '', github_url: '' },\r\n    { src: 'https://t1.daumcdn.net/cfile/blog/99EFF04B5E01683F30', nickname: 'zubetcha', blog_url: '', github_url: '' },\r\n    { src: 'https://t1.daumcdn.net/cfile/blog/99EFF04B5E01683F30', nickname: 'zubetcha', blog_url: '', github_url: '' },\r\n  ]\r\n  return (\r\n    <Grid maxWidth=\"300px\" minWidth=\"150px\" height=\"450px\" padding=\"20px 0 0 0\">\r\n      <Grid>\r\n        {members.map((member) => {\r\n          return (\r\n            <Grid is_flex>\r\n              <Grid is_flex margin=\"5px 15px 5px 10px\">\r\n                <Grid is_flex width=\"auto\">\r\n                  <Image src={member.src} shape=\"circle\" size=\"36\"></Image>\r\n                  <Text margin=\"0\">{member.nickname}</Text>\r\n                </Grid>\r\n                <Grid is_flex width=\"auto\">\r\n                  <FaceIcon\r\n                    style={{ margin: '0 8px', color: '#333', cursor: 'pointer' }}\r\n                    onClick={() => {\r\n                      window.location.href = ``\r\n                    }}\r\n                  ></FaceIcon>\r\n                  <GitHubIcon\r\n                    style={{ margin: '0 0 0 8px', color: '#333', cursor: 'pointer' }}\r\n                    onClick={() => {\r\n                      window.location.href = ``\r\n                    }}\r\n                  ></GitHubIcon>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          )\r\n        })}\r\n      </Grid>\r\n\r\n      <Grid margin=\"20px 0 0 20px\" width=\"auto\">\r\n        <Text size=\"10px\">© 2021 HANGHAELOG FROM TEAM 2</Text>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","// HotDeal.jsx\r\n// const resp = await axios.get('EC2IP:8000/api/hotdeals')\r\n// const resp = RESP.HOTDEALS\r\n// for (let i = 0; i < resp.length; i++) {}\r\n\r\n// response.js\r\nexport const RESP = {\r\n  LOGIN: {\r\n    ok: true,\r\n    token: 'sdfjksngkjndk',\r\n    msg: '로그인에 성공하셨습니다.',\r\n  },\r\n\r\n  REGISTER: {\r\n    ok: true,\r\n    msg: '회원가입에 성공하셨습니다.',\r\n  },\r\n\r\n  COMMENTWRITE: {\r\n    ok: true,\r\n    msg: '작성 완료',\r\n  },\r\n\r\n  COMMENTEDIT: {\r\n    ok: true,\r\n    msg: '수정 완료',\r\n  },\r\n\r\n  COMMENTLIST: {\r\n    comments: [\r\n      {\r\n        commentsId: 'AAAA',\r\n        userId: 'sdfggs',\r\n        postId: 'fghdfhdgf',\r\n        comment: '고양이 너무 귀여워요.',\r\n      },\r\n      {\r\n        commentsId: 'BBBB',\r\n        userId: 'ertryy',\r\n        postId: 'sdghhfd',\r\n        comment: '지금 너무 졸려요.',\r\n      },\r\n      {\r\n        commentsId: 'CCCC',\r\n        userId: 'hfdger',\r\n        postId: 'sfdghdfg',\r\n        comment: '오늘 너무 추워요.',\r\n      },\r\n      {\r\n        commentsId: 'DDDD',\r\n        userId: 'gczasd',\r\n        postId: 'etgdfgdg',\r\n        comment: '할 게 너무 많아요.',\r\n      },\r\n    ],\r\n  },\r\n\r\n  POSTLIST: {\r\n    posts: [\r\n      {\r\n        userId: 'ertryy',\r\n        postId: 'fghdfhdgf',\r\n        nickname: '가나다라',\r\n        createdAt: '2021-10-22 11:24:25',\r\n        content: '고양이 진짜 귀엽죠??',\r\n        imgUrl: 'http://image.dongascience.com/Photo/2020/10/8a5748b94df480da7df06adcdaa417c9.jpg',\r\n        numOfComments: 7,\r\n      },\r\n      {\r\n        userId: 'hfdger',\r\n        postId: 'sdghhfd',\r\n        nickname: '마바사',\r\n        createdAt: '2021-02-13 15:47:23',\r\n        content: '고양이 너무 귀엽죠??',\r\n        imgUrl: 'https://cdn3.jjal.gg/image09/2020-09-12jedcyyym.webp',\r\n        numOfComments: 10,\r\n      },\r\n      {\r\n        userId: 'gczasd',\r\n        postId: 'sfdghdfg',\r\n        nickname: '아자차카',\r\n        createdAt: '2021-06-25 06:53:12',\r\n        content: '재롱이 너무 귀엽죠???',\r\n        imgUrl: 'https://image-notepet.akamaized.net/resize/620x-/seimage/20200320%2Fc69c31e9dde661c286a3c17201c79d35.jpg',\r\n        numOfComments: 3,\r\n      },\r\n      {\r\n        userId: 'sdfggs',\r\n        postId: 'etgdfgdg',\r\n        nickname: '타파하',\r\n        createdAt: '2021-12-04 23:33:22',\r\n        content: '몽자 너무 귀엽죠??',\r\n        imgUrl:\r\n          'https://mblogthumb-phinf.pstatic.net/MjAxOTEyMTdfMTE3/MDAxNTc2NTkzMzEyNjU0.qUgY_fmhlnwaHVPROZeHy6IiX-1peh20J9y3i0-leBkg.YP8t06X0uEkGReClBBPVY_POJ_Ox-RGJBuv3FBdZgEkg.JPEG.prettysyjudy/IMG_7260.JPG?type=w800',\r\n        numOfComments: 22,\r\n      },\r\n    ],\r\n  },\r\n}\r\n\r\nconsole.log(RESP.COMMENTLIST)\r\n\r\nexport default Response\r\n","import React from 'react'\r\nimport './QuickMenu.css'\r\nimport Permit from '../shared/Permit'\r\nimport { Grid, Button, Image, Input, Text } from '../elements'\r\nimport { history } from '../redux/configureStore'\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle'\r\nimport ArrowDropDownCircleSharpIcon from '@mui/icons-material/ArrowDropDownCircleSharp'\r\n\r\nconst QuickMenu = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Grid position=\"fixed\" right=\"7%\" bottom=\"5%\">\r\n        <div className=\"Rotate\">\r\n          <Grid is_grid>\r\n            {/* <Permit> */}\r\n            <ArrowDropDownCircleSharpIcon\r\n              class=\"TopToButton\"\r\n              width=\"70px\"\r\n              cursor=\"pointer\"\r\n              onClick={() => {\r\n                window.scrollTo({ top: 0, behavior: 'smooth' })\r\n              }}\r\n            />\r\n            {/* </Permit> */}\r\n            <AddCircleIcon\r\n              class=\"AddButton\"\r\n              width=\"70px\"\r\n              cursor=\"pointer\"\r\n              onClick={() => {\r\n                history.push('/posts/write')\r\n              }}\r\n            />\r\n          </Grid>\r\n        </div>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default QuickMenu\r\n","import React from 'react'\r\nimport { Grid, Button, Input, Text } from '../elements/index'\r\n\r\nimport { actionCreators as userActions } from '../redux/modules/user'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { useState } from 'react'\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst Login = (props) => {\r\n  const dispatch = useDispatch()\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n\r\n  const [emailMessage, setEmailMessage] = useState('')\r\n  const [passwordMessage, setPasswordMessage] = useState('')\r\n\r\n  const [isEmail, setIsEmail] = useState('false')\r\n  const [isPassword, setIsPassword] = useState('false')\r\n\r\n  const onChangeEmail = (e) => {\r\n    const emailRegex = /([\\w-.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/\r\n    const emailCurrent = e.target.value\r\n    setEmail(emailCurrent)\r\n\r\n    if (!emailRegex.test(emailCurrent)) {\r\n      setEmailMessage('이메일 형식을 확인해주세요.')\r\n      setIsEmail(false)\r\n    } else {\r\n      setEmailMessage('올바른 이메일 형식이에요 : )')\r\n      setIsEmail(true)\r\n    }\r\n  }\r\n\r\n  const onChangePassword = (e) => {\r\n    const passwordRegex = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,25}$/\r\n    const passwordCurrent = e.target.value\r\n    setPassword(passwordCurrent)\r\n\r\n    if (!passwordRegex.test(passwordCurrent)) {\r\n      setPasswordMessage('숫자+영문자+특수문자 조합으로 8자리 이상 입력해주세요.')\r\n      setIsPassword(false)\r\n    } else {\r\n      setPasswordMessage('올바른 비밀번호에요 : )')\r\n      setIsPassword(true)\r\n    }\r\n  }\r\n\r\n  const login = () => {\r\n    if (email === '' || password === '') {\r\n      window.alert('아이디, 비밀번호를 입력해주세요!')\r\n      return\r\n    }\r\n    dispatch(userActions.logInDB({ email, password }))\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid maxWidth=\"400px\" margin=\"auto\">\r\n        <Grid margin=\"150px 0px 0px 0px\" border=\"2px solid #a496c7\">\r\n          <Grid padiing=\"50px\">\r\n            <Text size=\"36px\" weight=\"700\" align=\"center\">\r\n              Login\r\n            </Text>\r\n            <Grid maxWidth=\"350px\" margin=\"auto\">\r\n              <Grid>\r\n                <LInput placeholder=\"이메일 아이디\" type=\"email\" typeName=\"email\" onChange={onChangeEmail}></LInput>\r\n                {email.length > 0 && <Span className={`message ${isEmail ? 'success' : 'error'}`}>{emailMessage}</Span>}\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid maxWidth=\"350px\" margin=\"auto\">\r\n              <Grid>\r\n                <LInput type=\"password\" placeholder=\"비밀번호\" onChange={onChangePassword} passwordText=\"비밀번호 (숫자+영문자+특수문자 조합으로 8자리 이상)\" title=\"비밀번호\" typeTitle=\"password\" />\r\n                {password.length > 0 && <Span className={`message ${isPassword ? 'success' : 'error'}`}>{passwordMessage}</Span>}\r\n              </Grid>\r\n            </Grid>\r\n            <Grid margin=\"40px 0px 25px 0px\">\r\n              <Btn type=\"submit\" disabled={!(isEmail && isPassword)} onClick={login}>\r\n                로그인\r\n              </Btn>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst LInput = styled.input`\r\n  width: 98%;\r\n  height: 35px;\r\n  margin: 8px 0px;\r\n`\r\n\r\nconst Span = styled.span`\r\n  font-size: 13px;\r\n  color: #ffa07a;\r\n`\r\n\r\nconst Btn = styled.button`\r\n  margin: auto;\r\n  display: block;\r\n  align-items: center;\r\n  border: none;\r\n  width: 300px;\r\n  height: 50px;\r\n  border-radius: 10px;\r\n  cursor: pointer;\r\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n`\r\n\r\nexport default Login\r\n","import React from 'react'\r\nimport { Grid, Text } from '../elements/index'\r\nimport { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { actionCreators as userActions } from '../redux/modules/user'\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst Register = (props) => {\r\n  const dispatch = useDispatch()\r\n\r\n  //이름, 이메일, 비밀번호, 비밀번호 확인\r\n  const [nickname, setNickName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [passwordCheck, setPasswordCheck] = useState('')\r\n\r\n  //오류메시지 상태저장\r\n  const [nameMessage, setNameMessage] = useState('')\r\n  const [emailMessage, setEmailMessage] = useState('')\r\n  const [passwordMessage, setPasswordMessage] = useState('')\r\n  const [passwordCheckMessage, setPasswordCheckMessage] = useState('')\r\n\r\n  // 유효성 검사\r\n  const [isName, setIsName] = useState('false')\r\n  const [isEmail, setIsEmail] = useState('false')\r\n  const [isPassword, setIsPassword] = useState('false')\r\n  const [isPasswordConfirm, setIsPasswordConfirm] = useState('false')\r\n\r\n  // 이메일\r\n  const onChangeEmail = (e) => {\r\n    const emailRegex = /([\\w-.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/\r\n    const emailCurrent = e.target.value\r\n    setEmail(emailCurrent)\r\n\r\n    if (!emailRegex.test(emailCurrent)) {\r\n      setEmailMessage('이메일 형식을 확인해주세요.')\r\n      setIsEmail(false)\r\n    } else {\r\n      setEmailMessage('올바른 이메일 형식이에요 : )')\r\n      setIsEmail(true)\r\n    }\r\n  }\r\n\r\n  // 이름\r\n  const onChangeName = (e) => {\r\n    setNickName(e.target.value)\r\n    if (e.target.value.length < 2 || e.target.value.length > 11) {\r\n      setNameMessage('2글자 이상 11글자 미만으로 입력해주세요.')\r\n      setIsName(false)\r\n    } else {\r\n      setNameMessage('올바른 이름 형식이에요 :)')\r\n      setIsName(true)\r\n    }\r\n  }\r\n\r\n  // 비밀번호\r\n  const onChangePassword = (e) => {\r\n    const passwordRegex = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,25}$/\r\n    const passwordCurrent = e.target.value\r\n    setPassword(passwordCurrent)\r\n\r\n    if (!passwordRegex.test(passwordCurrent)) {\r\n      setPasswordMessage('숫자+영문자+특수문자 조합으로 8자리 이상 입력해주세요.')\r\n      setIsPassword(false)\r\n    } else {\r\n      setPasswordMessage('안전한 비밀번호에요 : )')\r\n      setIsPassword(true)\r\n    }\r\n  }\r\n\r\n  // 비밀번호 확인\r\n  const onChangePasswordConfirm = (e) => {\r\n    const passwordConfirmCurrent = e.target.value\r\n    setPasswordCheck(passwordConfirmCurrent)\r\n\r\n    if (password === passwordConfirmCurrent) {\r\n      setPasswordCheckMessage('비밀번호를 똑같이 입력했어요 : )')\r\n      setIsPasswordConfirm(true)\r\n    } else {\r\n      setPasswordCheckMessage('비밀번호가 일치하지 않습니다.')\r\n      setIsPasswordConfirm(false)\r\n    }\r\n  }\r\n\r\n  const register = () => {\r\n    dispatch(userActions.registerDB(email, nickname, password, passwordCheck))\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid maxWidth=\"400px\" margin=\"auto\">\r\n        <Grid margin=\"150px 0px 150px 0px\" border=\"2px solid #a496c7\">\r\n          <Grid padiing=\"50px\">\r\n            <Text size=\"36px\" weight=\"700\" align=\"center\">\r\n              Signup\r\n            </Text>\r\n\r\n            {/* <form onSubmit={register}></form> */}\r\n\r\n            <Grid maxWidth=\"350px\" margin=\"auto\">\r\n              <Grid>\r\n                <SignupInput placeholder=\"이메일 아이디\" type=\"email\" typeName=\"email\" onChange={onChangeEmail}></SignupInput>\r\n                {email.length > 0 && <Span className={`message ${isEmail ? 'success' : 'error'}`}>{emailMessage}</Span>}\r\n              </Grid>\r\n            </Grid>\r\n            <Grid maxWidth=\"350px\" margin=\"auto\">\r\n              <Grid>\r\n                <SignupInput placeholder=\"닉네임\" text=\"이름\" type=\"text\" typeName=\"name\" onChange={onChangeName} />\r\n                {nickname.length > 0 && <Span className={`message ${isName ? 'success' : 'error'}`}>{nameMessage}</Span>}\r\n              </Grid>\r\n            </Grid>\r\n            <Grid maxWidth=\"350px\" margin=\"auto\">\r\n              <Grid>\r\n                <SignupInput\r\n                  type=\"password\"\r\n                  placeholder=\"비밀번호\"\r\n                  onChange={onChangePassword}\r\n                  passwordText=\"비밀번호 (숫자+영문자+특수문자 조합으로 8자리 이상)\"\r\n                  title=\"비밀번호\"\r\n                  typeTitle=\"password\"\r\n                />\r\n                {password.length > 0 && <Span className={`message ${isPassword ? 'success' : 'error'}`}>{passwordMessage}</Span>}\r\n              </Grid>\r\n            </Grid>\r\n            <Grid maxWidth=\"350px\" margin=\"auto\">\r\n              <Grid>\r\n                <SignupInput type=\"password\" placeholder=\"비밀번호 확인\" onChange={onChangePasswordConfirm} passwordText=\" \" title=\"비밀번호 확인\" typeTitle=\"passwordConfirm\" />\r\n                {setPasswordCheck.length > 0 && <Span className={`message ${isPasswordConfirm ? 'success' : 'error'}`}>{passwordCheckMessage}</Span>}\r\n              </Grid>\r\n            </Grid>\r\n            <Grid margin=\"35px 0px 25px 0px\">\r\n              <SignupButton type=\"submit\" disabled={!(isName && isEmail && isPassword && isPasswordConfirm)} onClick={register}>\r\n                회원가입\r\n              </SignupButton>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst SignupInput = styled.input`\r\n  width: 98%;\r\n  height: 35px;\r\n  margin: 8px 0px;\r\n`\r\n\r\nconst Span = styled.span`\r\n  font-size: 13px;\r\n  color: #ffa07a;\r\n`\r\nconst SignupButton = styled.button`\r\n  margin: auto;\r\n  display: block;\r\n  align-items: center;\r\n  border: none;\r\n  width: 300px;\r\n  height: 50px;\r\n  border-radius: 10px;\r\n  cursor: pointer;\r\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n`\r\n\r\nexport default Register\r\n","import React, { useState } from 'react'\r\nimport './EachComment.css'\r\nimport { history } from '../redux/configureStore'\r\nimport styled from 'styled-components'\r\nimport SendIcon from '@mui/icons-material/Send'\r\nimport { actionCreators as commentActions } from '../redux/modules/comment'\r\nimport { Grid, Button, Image, Input, Text } from '../elements'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nconst EachComment = (props) => {\r\n  const dispatch = useDispatch()\r\n  const { comment, commentsId, userId, postId } = props\r\n  const post_list = useSelector((state) => state.POSTS)\r\n  const comment_list = useSelector((state) => state.COMMENTS)\r\n  // const user_id = useSelector((state) => state.COMMENTS.userId)\r\n  const is_click = onclick ? true : false\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* 댓글 */}\r\n      <Grid is_flex border=\".5px solid\" margin=\"0 0 5px 0\">\r\n        <Grid is_flex padding=\"15px\" width=\"auto\">\r\n          <Image shape=\"circle\" size=\"30\"></Image>\r\n          <Grid margin=\"0px 5px\" width=\"auto\">\r\n            <Text color=\"#333333\" width=\"auto\">\r\n              213am\r\n            </Text>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid margin=\"20px\">\r\n          {/* 공백포함 180자 */}\r\n          <Text>그럼 한 줄에 담기는 글자수는 몇 자 일까요? 정확하게 42자가 되네요 충분</Text>\r\n        </Grid>\r\n        <Grid is_flex width=\"auto\" margin=\"30px\">\r\n          {props.is_me && (\r\n            <button\r\n              className=\"CommentEditButton\"\r\n              _onClick={() => {\r\n                history.push(`/posts/${props.id}/edit`)\r\n              }}\r\n            >\r\n              수정\r\n            </button>\r\n          )}\r\n          {props.is_me && (\r\n            <button\r\n              className=\"CommentDeleteButton\"\r\n              _onClick={() => {\r\n                dispatch(commentActions.deleteComment({}))\r\n              }}\r\n            >\r\n              삭제\r\n            </button>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      {/* 댓글 */}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst Container = styled.div`\r\n  max-width: 1000px;\r\n  min-width: 650px;\r\n  margin: 0px auto 0px auto;\r\n  display: flex;\r\n  justify-content: space-around;\r\n`\r\n\r\nexport default EachComment\r\n\r\nconst CommentItem = (props) => {\r\n  const { comment, commentsId, userId, postId } = props\r\n  return (\r\n    <Grid is_flex border=\".5px solid\" margin=\"0 0 5px 0\">\r\n      <Grid is_flex padding=\"15px\">\r\n        <Image shape=\"circle\" size=\"30\"></Image>\r\n        <Grid margin=\"0px 5px\">\r\n          <Text color=\"#333333\" width=\"auto\" bold>\r\n            {userId}\r\n          </Text>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid>\r\n        <Text>{comment}</Text>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport './Comments.css'\r\nimport EachComment from '../components/EachComment'\r\nimport styled from 'styled-components'\r\nimport SendIcon from '@mui/icons-material/Send'\r\nimport { Grid, Button, Image, Input, Text } from '../elements'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nconst Comments = (props) => {\r\n  const dispatch = useDispatch()\r\n  const posts_list = useSelector((state) => state.POSTS)\r\n  const comments_list = useSelector((state) => state.COMMENTS)\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container>\r\n        <Grid maxWidth=\"800px\" minWidth=\"300px\">\r\n          <Grid is_flex padding=\"30px\" margin=\"100px 0 5px 0\" width=\"auto\" border=\"2px solid #a496c7\">\r\n            <div className=\"profileImage\">\r\n              <Image shape=\"circle\" size=\"70\" />\r\n            </div>\r\n            <Grid margin=\"0px 0px 60px 5px\">\r\n              <Text color=\"black\" size=\"30px\" margin=\"15px 0 0 10px\">\r\n                213am\r\n              </Text>\r\n              <Grid margin=\"-6px 0 0 10px\">\r\n                <hr noshade width=\"140px\" align=\"left\"></hr>\r\n              </Grid>\r\n              <Grid min-width=\"300px\" max-width=\"500px\">\r\n                <Text color=\"#333333\" margin=\"15px 0 0 10px\" size=\"20px\">\r\n                  &nbsp;오늘은 글자수 제한을 140자로 했을 때, 얼마나 많은 내용이 담기는 지 알아보겠습니다. 띄어쓰기를 포함해 140자인데 이게 생각보다는 많은 내용이 들어가네요? 이렇게 주저리주저리\r\n                  말해도 고작 100자 정도라니 꽉 채워서 댓글다는 사람에게는 잘해주세요\r\n                </Text>\r\n              </Grid>\r\n              <Grid margin=\"50px 0 -50px 15px\">댓글 0개</Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid width=\"100%\" margin=\"0px 0px 20px 0px\" is_flex>\r\n            <input className=\"commentLine\" type=\"text\" placeholder=\"최대 140자까지 자유롭게 댓글을 남길 수 있습니다 : )\" maxlength=\"140\" />\r\n            <SendIcon class=\"commentSubmit\" onClick=\"\"></SendIcon>\r\n          </Grid>\r\n          <Grid justify-content=\"center\">\r\n            <EachComment />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst Container = styled.div`\r\n  max-width: 1000px;\r\n  min-width: 650px;\r\n  margin: 0px auto 0px auto;\r\n  display: flex;\r\n  justify-content: space-around;\r\n`\r\n\r\nexport default Comments\r\n\r\nconst CommentItem = (props) => {\r\n  const { comment, commentsId, userId, postId } = props\r\n  return (\r\n    <Grid is_flex border=\".5px solid\" margin=\"0 0 5px 0\">\r\n      <Grid is_flex padding=\"15px\">\r\n        <Image shape=\"circle\" size=\"30\"></Image>\r\n        <Grid margin=\"0px 5px\">\r\n          <Text color=\"#333333\" width=\"auto\" bold>\r\n            {userId}\r\n          </Text>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid>\r\n        <Text>{comment}</Text>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Grid, Button, Input, Text, Image } from '../elements'\r\nimport { history } from '../redux/configureStore'\r\nimport ChatBubbleOutlineIcon from '@mui/icons-material/ChatBubbleOutline'\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\nimport BorderColorIcon from '@mui/icons-material/BorderColor'\r\nimport IconButton from '@mui/material/IconButton'\r\n\r\nconst PostLists = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Grid maxWidth=\"700px\" minWidth=\"500px\" margin=\"80px 0px 0px 0px\">\r\n        <Grid is_flex>\r\n          <Grid is_flex width=\"auto\">\r\n            <Image shape=\"circle\" />\r\n          </Grid>\r\n          <Grid is_flex margin=\"0px 8px\">\r\n            <Text margin=\"0px\" weight=\"500\" size=\"18px\">\r\n              jawoon\r\n            </Text>\r\n            <Text margin=\"0px\" size=\"13px\" color=\"#A4A4A4\">\r\n              20분 전\r\n            </Text>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid is_flex>\r\n          <Grid padding=\"8px\">\r\n            <Text size=\"15px\">콩이입니다</Text>\r\n          </Grid>\r\n          <IconButton>\r\n            <BorderColorIcon\r\n              onClick={() => {\r\n                history.push('/posts/:id/edit')\r\n              }}\r\n            ></BorderColorIcon>\r\n          </IconButton>\r\n          <IconButton>\r\n            <DeleteIcon></DeleteIcon>\r\n          </IconButton>\r\n        </Grid>\r\n\r\n        <Grid is_flex>\r\n          <Image Image size=\"700\" src=\"https://kimkong2.s3.ap-northeast-2.amazonaws.com/KakaoTalk_20211129_233615066_02.jpg\"></Image>\r\n        </Grid>\r\n\r\n        <Grid is_flex>\r\n          <Grid is_flex width=\"auto\">\r\n            {/* <Grid is_flex>\r\n              <Grid is_flex width=\"auto\">\r\n                <FavoriteBorderIcon></FavoriteBorderIcon>\r\n              </Grid>\r\n              <Grid is_flex margin=\"0px 4px\">\r\n                <Text margin=\"0px\" size=\"14px\">\r\n                  10\r\n                </Text>\r\n              </Grid>\r\n            </Grid> */}\r\n          </Grid>\r\n          <Grid is_flex margin=\"0px\">\r\n            <Grid is_flex>\r\n              <Grid is_flex width=\"auto\" margin=\"0px 4px\">\r\n                <IconButton>\r\n                  <ChatBubbleOutlineIcon\r\n                    onClick={() => {\r\n                      history.push('/posts/:id/comments')\r\n                    }}\r\n                  ></ChatBubbleOutlineIcon>\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid is_flex>\r\n                <Text margin=\"0px\" size=\"13px\">\r\n                  댓글 10개\r\n                </Text>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nPostLists.defaultProps = {\r\n  user_info: {\r\n    user_name: 'jawoon',\r\n    user_profile: 'https://cdn-icons-png.flaticon.com/512/1864/1864514.png',\r\n  },\r\n  image_url: 'https://kimkong2.s3.ap-northeast-2.amazonaws.com/KakaoTalk_20211129_233615066_02.jpg',\r\n  contents: '김콩',\r\n  comment_cnt: 10,\r\n  insert_dt: '2021-02-27 10:00:00',\r\n}\r\n\r\nexport default PostLists\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Grid } from '../elements'\r\nimport Header from '../components/Header'\r\nimport Footer from '../components/Footer'\r\nimport PostLists from '../components/PostLists'\r\n\r\nconst Main = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Container>\r\n        <Grid maxWidth=\"700px\" minWidth=\"500px\" bg=\"#FFF\">\r\n          <PostLists></PostLists>\r\n          <PostLists></PostLists>\r\n          <PostLists></PostLists>\r\n        </Grid>\r\n        <Grid>\r\n          <Footer></Footer>\r\n        </Grid>\r\n      </Container>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst Container = styled.div`\r\n  max-width: 1000px;\r\n  min-width: 650px;\r\n  margin: 0 auto;\r\n\r\n  display: flex;\r\n`\r\n\r\nexport default Main\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\n// **** component, elements, modules, apis **** //\r\nimport { Grid } from '../elements'\r\nimport { actionCreators as imageActions } from '../redux/modules/image'\r\n\r\nconst Upload = (props) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const is_uploading = useSelector((state) => state.image.uploading)\r\n  const fileInput = React.useRef()\r\n\r\n  const [filename, setFilename] = React.useState('')\r\n\r\n  const selectFile = async (e) => {\r\n    const reader = new FileReader()\r\n    // 이미지 업로드 POST api request 파라미터에 넣을 데이터\r\n    const file = fileInput.current.files[0]\r\n\r\n    reader.readAsDataURL(file)\r\n    reader.onloadend = () => {\r\n      console.log(reader.result)\r\n      dispatch(imageActions.setPreview(reader.result))\r\n    }\r\n\r\n    dispatch(imageActions.uploadImageDB(file))\r\n\r\n    setFilename(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid>\r\n        <Label className=\"input-file-button\" htmlFor=\"input-file\">\r\n          업로드\r\n        </Label>\r\n        <UploadName value={filename} placeholder=\"첨부파일\"></UploadName>\r\n        <input type=\"file\" accept=\"image/*\" id=\"input-file\" style={{ display: 'none' }} onChange={selectFile} ref={fileInput}></input>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst Label = styled.label`\r\n  width: 100px;\r\n  height: 25px;\r\n  padding: 6px 25px;\r\n  margin-right: 10px;\r\n  background-color: #a496c7;\r\n  border-radius: 4px;\r\n  color: whitesmoke;\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n  box-sizing: border-box;\r\n`\r\n\r\nconst UploadName = styled.input`\r\n  display: inline-block;\r\n  width: 69%;\r\n  height: 27px;\r\n  padding: 0 10px;\r\n  vertical-align: middle;\r\n  border: 1px solid #dddddd;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  color: #999999;\r\n  box-sizing: border-box;\r\n  background-color: rgb(247, 247, 247);\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`\r\n\r\nexport default Upload\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport Upload from '../shared/Upload'\r\nimport { Grid, Text } from '../elements'\r\nimport { actionCreators as postActions } from '../redux/modules/post'\r\nimport { actionCreators as imageActions } from '../redux/modules/image'\r\n\r\nconst PostWrite = (props) => {\r\n  const defaultImage = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSqCQrU2ehVPXr5xwc4CBn-uOUjT3dAPOSZSQ&usqp=CAU'\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const is_login = useSelector((state) => state.user.is_login)\r\n  const preview = useSelector((state) => state.image.preview)\r\n  const post_list = useSelector((state) => state.post.list)\r\n\r\n  const post_id = props.match.params.id\r\n  const is_edit = post_id ? true : false\r\n  const _post = is_edit ? post_list.find((post) => post.postId === post_id) : null\r\n\r\n  const { history } = props\r\n\r\n  const [content, setContent] = React.useState(_post ? _post.content : '')\r\n\r\n  React.useEffect(() => {\r\n    if (is_edit && !_post) {\r\n      window.alert('포스트 정보가 없습니다.')\r\n      console.log('포스트 정보가 없습니다.')\r\n      history.goBack()\r\n\r\n      return\r\n    }\r\n\r\n    if (is_edit) {\r\n      dispatch(imageActions.setPreview(_post.imgUrl))\r\n    }\r\n  }, [])\r\n\r\n  const changeContent = (e) => {\r\n    setContent(e.target.value)\r\n  }\r\n\r\n  const textCnt = content.length\r\n\r\n  const addPost = () => {\r\n    if (preview === null || content === '') {\r\n      window.alert('이미지 업로드와 텍스트 입력을 모두 완료해주세요!')\r\n      return\r\n    } else {\r\n      dispatch(postActions.addPostDB(content))\r\n    }\r\n  }\r\n\r\n  const editPost = () => {\r\n    if (preview === null || content === '') {\r\n      window.alert('이미지 업로드와 텍스트 입력을 모두 완료해주세요!')\r\n      return\r\n    } else {\r\n      dispatch(postActions.editPostDB(post_id, content))\r\n    }\r\n  }\r\n\r\n  // **** 로그인 구현 후 주석 풀기 **** //\r\n  // if (!is_login) {\r\n  //   return (\r\n  //     <Grid maxWidth=\"400px\" margin=\"auto\">\r\n  //       <Grid margin=\"200px 0px 0px 0px\" height=\"328px\" border=\"2px solid #a496c7\">\r\n  //         <Text size=\"20px\" align=\"center\" margin=\"80px 0 120px 0\">\r\n  //           로그인 후 작성하실 수 있습니다.\r\n  //         </Text>\r\n  //         <Btn\r\n  //           style={{ margin: 'auto' }}\r\n  //           onClick={() => {\r\n  //             history.replace('/api/posts')\r\n  //           }}\r\n  //         >\r\n  //           홈으로 이동\r\n  //         </Btn>\r\n  //       </Grid>\r\n  //     </Grid>\r\n  //   )\r\n  // }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Wrap>\r\n        <Grid>\r\n          <Title>{is_edit ? 'Edit Post' : 'New Post'}</Title>\r\n        </Grid>\r\n        <Grid is_flex>\r\n          <Grid padding=\"0 0 0 20px\" maxWidth=\"300px\" minWidth=\"150px\">\r\n            <Text size=\"20px\" weight=\"700\">\r\n              nickname\r\n            </Text>\r\n            <Upload />\r\n            <Textarea value={content} onChange={changeContent} label=\"게시글 내용\" placeholder=\"텍스트를 입력해주세요.\" maxLength=\"200\" required></Textarea>\r\n            <Grid is_flex width=\"auto\">\r\n              <Grid></Grid>\r\n              {<TextCnt>{textCnt} / 200</TextCnt>}\r\n            </Grid>\r\n            {is_edit ? <Btn onClick={editPost}>수정하기</Btn> : <Btn onClick={addPost}>작성하기</Btn>}\r\n          </Grid>\r\n          <Grid width=\"100%\" maxWidth=\"450px\" minWidth=\"400px\" margin=\"18px\">\r\n            <ImageInner src={preview ? preview : defaultImage}></ImageInner>\r\n          </Grid>\r\n        </Grid>\r\n      </Wrap>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst Wrap = styled.div`\r\n  max-width: 800px;\r\n  min-width: 600px;\r\n  max-height: 600px;\r\n  min-height: 400px;\r\n  margin: 150px auto 0 auto;\r\n  border: 2px solid #a496c7;\r\n`\r\n\r\nconst Title = styled.p`\r\n  /* padding: 30px 0; */\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n  text-align: center;\r\n`\r\n\r\nconst Textarea = styled.textarea`\r\n  width: 100%;\r\n  min-width: 250px;\r\n  height: 200px;\r\n  max-height: 200px;\r\n  min-height: 150px;\r\n  margin: 20px 0 0 0;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n\r\n  border: none;\r\n  resize: none;\r\n\r\n  &:focus {\r\n    outline: none;\r\n    border: none;\r\n  }\r\n`\r\n\r\nconst TextCnt = styled.p`\r\n  width: 60px;\r\n  display: inline-block;\r\n  font-size: 12px;\r\n  color: #9f9f9f;\r\n  text-align: right;\r\n  margin: 5px 0;\r\n\r\n  &:hover {\r\n    color: #333;\r\n  }\r\n`\r\n\r\nconst Btn = styled.button`\r\n  display: block;\r\n  width: 120px;\r\n  height: 40px;\r\n  box-sizing: border-box;\r\n  border: none;\r\n  border-radius: 20px;\r\n  outline: none;\r\n  background-color: #333;\r\n  color: #fdfdfd;\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  cursor: pointer;\r\n  margin: 20px auto 0 auto;\r\n\r\n  will-change: transform;\r\n  transition: transform 450ms;\r\n  &:hover {\r\n    background-color: #a496c7;\r\n    transition: transform 500ms;\r\n    transform: translateY(-3px);\r\n  }\r\n`\r\n\r\nconst ImageInner = styled.div`\r\n  position: relative;\r\n  padding-top: 100%;\r\n  overflow: hidden;\r\n  background-image: url('${(props) => props.src}');\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n`\r\n\r\nexport default PostWrite\r\n","import React from 'react'\r\nimport './App.css'\r\nimport { Route } from 'react-router-dom'\r\nimport { ConnectedRouter } from 'connected-react-router'\r\nimport { useDispatch } from 'react-redux'\r\nimport { history } from '../redux/configureStore'\r\nimport { Grid } from '../elements'\r\nimport Header from '../components/Header'\r\nimport Footer from '../components/Footer'\r\nimport QuickMenu from '../components/QuickMenu'\r\nimport Login from '../pages/Login'\r\nimport Register from '../pages/Register'\r\nimport Comments from '../pages/Comments'\r\nimport Main from '../pages/Main'\r\nimport PostWrite from '../pages/PostWrite'\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Grid>\r\n        <Header></Header>\r\n        <ConnectedRouter history={history}>\r\n          <Route path=\"/posts\" exact component={Main}></Route>\r\n          <Route path=\"/login\" exact component={Login}></Route>\r\n          <Route path=\"/register\" exact component={Register}></Route>\r\n          <Route path=\"/posts/write\" exact component={PostWrite}></Route>\r\n          <Route path=\"/posts/:id/edit\" exact component={PostWrite}></Route>\r\n          <Route path=\"/posts/:id/comments\" exact component={Comments}></Route>\r\n        </ConnectedRouter>\r\n        <QuickMenu></QuickMenu>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './shared/App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { Provider } from 'react-redux'\r\nimport store from './redux/configureStore'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nreportWebVitals()\r\n"],"sourceRoot":""}